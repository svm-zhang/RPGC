import logging
from sys import stdout, stderr

class Logger(object) :
	"""
		A class for setting up logger
		Normal information and warnings generated by home-made scripts will go to STDOUT
		Errors generated by home-made scripts will go to STDERR
		Log generated by external programs
	"""

	def __init__(self) :
		"""
			Construct a Logger Object
		"""
		self.formatter = logging.Formatter("%(asctime)s %(name)-12s %(levelname)-8s %(message)s")
		self._log_events = {"normal_info": [stdout, logging.INFO], "err": [stderr, logging.ERROR], "warning": [stdout, logging.WARNING]}

	def add_stream_logger(self, logger_name) :
		"""
			Add logger that outputs to stream
		"""
		self.std_logger = logging.getLogger(logger_name)
		self.std_logger.setLevel(logging.DEBUG)
		self.add_stream_handler()
		return self.std_logger

	def add_file_logger(self, logger_name, log_to_file) :
		"""
			Add logger that outputs to file
		"""
		self.file_logger = logging.getLogger(logger_name)
		self.file_logger.setLevel(logging.DEBUG)
		self.log_to_file = log_to_file
		self.add_file_handler()
		return self.file_logger

	def add_file_handler(self) :
		"""
			Add file handler to file_logger
		"""
		log_file_handler = logging.FileHandler(self.log_to_file, mode = 'w')
		self.file_logger.addHandler(self.customize_handler(log_file_handler, logging.INFO))

	def add_stream_handler(self) :
		"""
			Add stream handler to std_logger
			Normal and warning messages go to STDOUT
			Errors go to STDERR
		"""
		for event in self._log_events.iterkeys() :
			self.std_logger.addHandler(self.customize_handler(logging.StreamHandler(self._log_events[event][0]), self._log_events[event][1]))

	def customize_handler(self, handler, level) :
		"""
			customize stream handler with format and logging level
		"""
		handler.setFormatter(self.formatter)
		handler.addFilter(Logging_Level_Filter(level))
		return handler

# define logging level #
class Logging_Level_Filter(logging.Filter) :
	"""
		A customized subclass of logging.Filter
	"""
	def __init__(self, level) :
		"""
			Construct a Logging_Level_Filter object
		"""
		self.level = level

	def filter(self, record) :
		"""
			Filter out logging message based on a given logging level
		"""
		return record.levelno == self.level
